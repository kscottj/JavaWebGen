/*
Copyright (c) 2018 Kevin Scott
Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 SOFTWARE.
 */ 
package org.javaWebGen.data.bean;

import java.text.*;
import java.math.*;
import java.io.*;
import java.util.ArrayList;
import javax.jdo.annotations.*;
import javax.annotation.Generated;
import org.javaWebGen.exception.DBException;
import org.javaWebGen.data.DbResult;
import org.javaWebGen.data.DataBean;
import org.javaWebGen.data.FormBeanAware;
import org.javaWebGen.util.StringUtil;
import org.json.*;
/******************************************************************************
* WARNING this JTO object is generated by GenerateJDODataBean v2_12 based on Database config
* This class should not be modified, but, may be extended.
* It will be regenerated when the database schema changes.
*******************************************************************************/
@Generated(value = { "org.javaWebGen.generator.GenerateJDODataBean " })
@PersistenceCapable(identityType = IdentityType.APPLICATION)
@SuppressWarnings({ "serial", "unused" }) 
public class Book implements DataBean, Serializable{ 
//begin private Vars
	private static int[] types=null;
	@PrimaryKey
	@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
	private Long bookId = null;
	@Persistent 
	private String title = null;
	@Persistent 
	private String isbn = null;
	@Persistent
	private Long publisherId = null;
	@Persistent
	private Long authorId = null;
	@Persistent 
	private java.util.Date createDate = null;

//begin getters and setters

	/************************************************
	*Get value from bound field book_id
	*@return value from bound data field
	************************************************/
	public Long getBookId() {
		return bookId;
	}

	/************************************************
	*Set value to bound field book_id
	*@param value for  bound data field
	************************************************/
	public void setBookId(Long value){
		bookId=value;
	}

	/************************************************
	*Get value from bound field title
	*@return value from bound data field
	**************************************************/
	public String getTitle() {
			return title;
	}

	/************************************************
	*Set value to bound field title
	*@param value for  bound data field
	*************************************************/
	public void setTitle(String value){
		if(value==null){
			title=null;
		}else{
			title= value;
		}
	}

	/************************************************
	*Get value from bound field isbn
	*@return value from bound data field
	**************************************************/
	public String getIsbn() {
			return isbn;
	}

	/************************************************
	*Set value to bound field isbn
	*@param value for  bound data field
	*************************************************/
	public void setIsbn(String value){
		if(value==null){
			isbn=null;
		}else{
			isbn= value;
		}
	}

	/************************************************
	*Get value from bound field publisher_id
	*@return value from bound data field
	************************************************/
	public Long getPublisherId() {
		return publisherId;
	}

	/************************************************
	*Set value to bound field publisher_id
	*@param value for  bound data field
	************************************************/
	public void setPublisherId(Long value){
		publisherId=value;
	}

	/************************************************
	*Get value from bound field author_id
	*@return value from bound data field
	************************************************/
	public Long getAuthorId() {
		return authorId;
	}

	/************************************************
	*Set value to bound field author_id
	*@param value for  bound data field
	************************************************/
	public void setAuthorId(Long value){
		authorId=value;
	}

	/************************************************
	*Get value from bound field create_date
	*@return value from bound data field
	**************************************************/
	public java.util.Date getCreateDate() {
		return createDate;
	}

	/************************************************
	*Set value to bound field create_date
	*@param value for  bound data field
	*************************************************/
	public void setCreateDate(java.util.Date value){
		createDate=value;
	}
	/*******************************************************
	*Set a long column book_id based on a string
	*@param input String
	******************************************************/
	public void setBookId(String input) throws ParseException{
		if(input!=null && input.trim().length()>0 ){
		bookId=new Long(input);
		}
	}
	/*******************************************************
	*Set a long column publisher_id based on a string
	*@param input String
	******************************************************/
	public void setPublisherId(String input) throws ParseException{
		if(input!=null && input.trim().length()>0 ){
		publisherId=new Long(input);
		}
	}
	/*******************************************************
	*Set a long column author_id based on a string
	*@param input String
	******************************************************/
	public void setAuthorId(String input) throws ParseException{
		if(input!=null && input.trim().length()>0 ){
		authorId=new Long(input);
		}
	}
	/*************************************************************************
	*Attempt to set a DATE or TIMESTAMP column create_date based on a string
	*@param input String
	*****************************************************************************/
	public void setCreateDate(String input) throws ParseException{
		if(input!=null && input.trim().length()>0 ){
			createDate=StringUtil.convertToDate(input);
		}
	}

//begin getData

	/************************************************
	*Get all data Objects bound to data bean  
	*@return data from object as array of objects 
	****************************************************/
	public Object[] getData(){
		Object[] data = new Object[6];
		data[0]=bookId;
		data[1]=title;
		data[2]=isbn;
		data[3]=publisherId;
		data[4]=authorId;
		data[5]=createDate;
		return data;
	} //end getData

//begin setData

	/*****************************************************************
	*Populates object with data
	*@param data matching the data from a table
	*@see org.javaWebGen.data.DAO
	*@see org.javaWebGen.data.DbResult
	*******************************************************************/
	public void setData(Object[] data) throws IllegalArgumentException{
		if( data.length != 6){
			throw new IllegalArgumentException("query return wrong number of rows "+data.length);
		} //end if

		bookId = (Long) data[0];
		if (data[1]!=null){
			title =  data[1].toString();
		}else{
			title=null;
		}
		if (data[2]!=null){
			isbn =  data[2].toString();
		}else{
			isbn=null;
		}
		publisherId = (Long) data[3];
		authorId = (Long) data[4];
		createDate = (java.util.Date) data[5];
	}//end setData

//begin get Insert

	/****************************************************
	*Build SQL insert statement without a where clause 
	*@return sqle  
	*
	*******************************************************/ 
	public static final String getInsertSQL(){
		String sql = "INSERT INTO book (book_id,title,isbn,publisher_id,author_id,create_date) VALUES(?,?,?,?,?,?)";
		return sql;
	}

//begin get update

	/***************************************************
	*Build SQL update statement without a where clause 
	*@return update sql without where clause
	*****************************************************/ 
	public static final String getUpdateSQL(){
		String sql ="UPDATE book SET book_id=? ,title=? ,isbn=? ,publisher_id=? ,author_id=? ,create_date=? ";
		return sql;
	}

//begin get select

	/**************************************************
	*Build SQL select statement without a where clause 
	*@return sqlect SQL without where clause
	*****************************************************/ 
	public static final String getSelectSQL(){
		String sql = "Select book_id,title,isbn,publisher_id,author_id,create_date from book ";
		return sql;
	}

//begin get makeLoad

	/*******************************************************************************************
	*Loads DbResult into object
	*@param result
	*@see org.javaWebGen.data.DbResult
	**********************************************************************************************/ 
	public static ArrayList<Book> load(DbResult result) throws  IllegalArgumentException{
		ArrayList <Book>list= new ArrayList<Book>(result.size() );
		for (int i=0; i< result.size(); i++){
			Book o= new Book();
			o.setData( result.get(i) );
			list.set(i,o);
		 }
		 return list;
	}

//begin make Type 
	/*****************************************************
	*Get an array of column types that match DB table
	*@return array of Types
	******************************************************/
	public int[] getDataTypes(){
		if(types == null){
		 types = new int[6];
			 types[0]=-5;
			 types[1]=12;
			 types[2]=12;
			 types[3]=-5;
			 types[4]=-5;
			 types[5]=91;
		} //end if
	return types;
	}


//begin toXML()

	/********************************************
	*Builds an XML String based on object data
	*@return XML value of bound data
	***********************************************/
	public String toXML(){
		String xml="<Book bookId=\""+getBookId()+"\" title=\""+getTitle()+"\" isbn=\""+getIsbn()+"\" publisherId=\""+getPublisherId()+"\" authorId=\""+getAuthorId()+"\" createDate=\""+getCreateDate()+"\" />\n";
		return xml;
	}//end toXML()

//make JSON text 

	/*********************************************
	*Builds a JSON String based on object data
	*@return JSON text string
	************************************************/
	public String toJSON() {

		JSONObject jo = new JSONObject();
		try{
			jo.append("bookId",getBookId() );
			jo.append("title",getTitle() );
			jo.append("isbn",getIsbn() );
			jo.append("publisherId",getPublisherId() );
			jo.append("authorId",getAuthorId() );
			jo.append("createDate",getCreateDate() );
			return jo.toString();
 		}catch(JSONException je){
			return " Book{exception:'"+je.getMessage()+"}'";
 		}
	} //end to Json

//  make  Overrides 
	@Override
	/***********************************************
	* Check value of data bound object.   
	*@param object to check value of
	************************************************/
	public boolean equals(Object o){
		if( o!=null && o instanceof FormBeanAware){
			FormBeanAware bean =(FormBeanAware) o;
			return bean.toXML().equals(bean.toXML() );
		}else{
			return false;
		}
	}

}//end Generated class
