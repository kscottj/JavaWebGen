/*
Copyright (c) 2012-2013 Kevin Scott
Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 SOFTWARE.
 */ 
package org.javaWebGen.data.bean;

import java.text.*;
import java.math.*;
import java.io.*;
import java.util.ArrayList;
import javax.jdo.annotations.*;
import org.javaWebGen.exception.DBException;
import org.javaWebGen.data.DbResult;
import org.javaWebGen.data.DataBean;
import org.javaWebGen.util.StringUtil;
import org.json.*;
/******************************************************************************
* WARNING this class is generated by GenerateJDODataBean v2_10 based on Database schema
* This class should not be modified, but may be extended.
* It will be regenerated when the database schema changes.
*******************************************************************************/
@PersistenceCapable(identityType = IdentityType.APPLICATION)
@SuppressWarnings({ "serial", "unused" }) //TODO generator should be smarter about this
public class Author implements DataBean, Serializable{ 
//begin private Vars
private static int[] types=null;
@PrimaryKey
@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
private Long authorId = null;
@Persistent 
private String firstName = null;
@Persistent 
private String lastName = null;

//begin getters and setters

	/********************************************
	*Warning Generated method gets value of field
	*@return value from database column
	***********************************************/
	public Long getAuthorId() {
		return authorId;
	}

	/*********************************************
	*Warning Generated method sets field value
	*@param value for database column
	*************************************************/
	public void setAuthorId(Long value){
		authorId=value;
	}

	/********************************************
	*Warning Generated method gets value of field
	*@return value from database column
	***********************************************/
	public String getFirstName() {
			return firstName;
	}

	/*********************************************
	*Warning Generated method sets field value
	*@param value for database column
	*************************************************/
	public void setFirstName(String value){
		if(value==null){
			firstName=null;
		}else{
			firstName= value;
		}
	}

	/********************************************
	*Warning Generated method gets value of field
	*@return value from database column
	***********************************************/
	public String getLastName() {
			return lastName;
	}

	/*********************************************
	*Warning Generated method sets field value
	*@param value for database column
	*************************************************/
	public void setLastName(String value){
		if(value==null){
			lastName=null;
		}else{
			lastName= value;
		}
	}
	/****************************************
	*set a long column based on a string
	*@param input String
	*******************************************************/
	public void setAuthorId(String input) throws ParseException{
		if(input!=null && input.trim().length()>0 ){
		authorId=new Long(input);
		}
	}

//begin toXML()

	/************************************
	*Warning Generated method builds an XML String based on object data
	*@return xml 
	****************************************/

	public String toXML(){
		String xml="<Author authorId='"+getAuthorId()+"' firstName='"+getFirstName()+"' lastName='"+getLastName()+"' />\n";
		return xml;
	}//end toXML()
//begin getData

	/****************************************************
	*Warning Generated method gets all data in data bean  
	*@return data from object as array of objects 
	*******************************************************/
	public Object[] getData(){
		Object[] data = new Object[3];
		data[0]=authorId;
		data[1]=firstName;
		data[2]=lastName;
		return data;
	} //end getData

//begin setData

	/*********************************************
	*Warning Generated method fills object with data
	*@param data matching the data from a table
	*@see org.javaWebGen.data.DAO
	*@see org.javaWebGen.data.DbResult
	*************************************************/
	public void setData(Object[] data) throws IllegalArgumentException{
		if( data.length != 3){
			throw new IllegalArgumentException("query return wrong number of rows "+data.length);
		} //end if

		authorId = (Long) data[0];
		if (data[1]!=null){
			firstName =  data[1].toString();
		}else{
			firstName=null;
		}
		if (data[2]!=null){
			lastName =  data[2].toString();
		}else{
			lastName=null;
		}
	}//end setData

//begin get Insert

	/********************************************
	*Warning Generated method gets insert statement without a where clause 
	*@return insert statement without where clause  
	************************************************
	*/ 
	public static String getInsertSQL(){
		String sql = "INSERT INTO author (author_id,first_name,last_name) VALUES(?,?,?)";
		return sql;
	}

//begin get update

	/********************************************
	*Warning Generated method gets Update Statement without a where clause
	*@return update sql without where clause
	**************************************/ 
	public static String getUpdateSQL(){
		String sql ="UPDATE author SET author_id=? ,first_name=? ,last_name=? ";
		return sql;
	}

//begin get select

	/************************************
	*Warning Generated method gets a select statement without a where clause
	*@return select sql without a where clause
	****************************************/ 
	public static String getSelectSQL(){
		String sql = "Select author_id,first_name,last_name from author ";
		return sql;
	}

//begin get makeLoad

	/**********************************************
	*Warning Generated method loads DbResult into object
	*@param result
	*@see org.javaWebGen.data.DbResult
	************************************************/ 
	public static ArrayList<Author> load(DbResult result) throws  IllegalArgumentException{
		ArrayList <Author>list= new ArrayList<Author>(result.size() );
		for (int i=0; i< result.size(); i++){
			Author o= new Author();
			o.setData( result.get(i) );
			list.set(i,o);
		 }
		 return list;
	}

//begin make Type 
	/**********************************************
	*get an array of column types that match DB table
	*@return array of Types
	************************************************/
	public int[] getDataTypes(){
		if(types == null){
		 types = new int[3];
			 types[0]=-5;
			 types[1]=12;
			 types[2]=12;
		} //end if
	return types;
	}


//make JSON text 

	/************************************
	*Warning Generated method builds an JSON String based on object data
	*@return JSON text string
	****************************************/

	public String toJSON() {

		JSONObject jo = new JSONObject();
		try{
			jo.append("authorId",getAuthorId() );
			jo.append("firstName",getFirstName() );
			jo.append("lastName",getLastName() );
			return jo.toString();
 		}catch(JSONException je){
			return " Author{exception:'"+je.getMessage()+"}'";
 		}
	} //end to Json

}//end Generated class
