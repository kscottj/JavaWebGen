/*
Copyright (c) 2018 Kevin Scott All rights  reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of 
 this software and associated documentation files (the "Software"), to deal in 
 the Software without restriction, including without limitation the rights to 
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
 so.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 SOFTWARE.
 */ 
/** data Object talks to DB **/
package org.javaWebGen.data.dao;

import java.util.*;
import javax.annotation.Generated;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;import org.javaWebGen.data.bean.*;
import org.javaWebGen.exception.DBException;
import org.javaWebGen.data.FormBeanAware;
import org.javaWebGen.data.DaoAware;
import org.javaWebGen.data.GAEMappingAware;
/******************************************************************************
* WARNING this class is generated by GenerateGaeDao v0_57 based on Database schema     
* This class should not be modified, but may be extended.
  This class will be regenerated if the database schema is changed. 
* @author Kevin Scott                                                        
*******************************************************************************/
@Generated(value = { "org.javaWebGen.generator.GenerateGaeDao" })
public abstract class BookDAOImpl implements DaoAware, GAEMappingAware { 
	public static final int PAGE_SIZE=100;
 //begin private Vars

	public BookDAOImpl(){}
//find by Primary Key

	/***********************************************************************************************
	* Get a data bound JavaBean populated with data from table/kind Book
	* @param key id to find
	* @return data bound JavaBean with data populated
	**************************************************************************************************/
	public Book findByPrimaryKey(Long id) throws DBException{
		if(id==null){throw new DBException(DBException.DAO_ERROR,"Book id=null");}
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Entity entity=null;
		try {
			Key key = KeyFactory.createKey("Book",id);
			entity =datastore.get(key);
		} catch (EntityNotFoundException e) {
				throw new DBException(DBException.NOT_FOUND_ERROR,e);
		}
		return this.mapRow(entity);
	} //find by primary key

//begin insert (create)

	/***************************************************************
	* Insert data into Datastore with kind/table Book
	* @param bean data bound JavaBean to stored in the Datastore 
	* @return key/id of created row
	******************************************************************/
	public Long insert(Book bean) throws DBException{
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Long id=null;
		try{
			Entity entity = new Entity("Book");
			mapEntity(entity,bean);
			datastore.put(entity);
			id=entity.getKey().getId() ;
			entity.setProperty("book_id", id);
			datastore.put(entity);
		}catch(Exception e){
			throw new DBException(DBException.DAO_ERROR,e);
		}
			return id;
	}

//begin update(store)

	/**********************************************************
	* Updates the Datastore with a bound JavaBean with a kind/table of Book 
	* @param  bean data bound JavaBean to update kind/table
	* @return number row changed
	**************************************************************/
	public int update(Book bean) throws DBException{
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Key key = KeyFactory.createKey("Book", bean.getBookId() );
		try {
			Entity entity=datastore.get(key);
			mapEntity(entity,bean);
			datastore.put(entity);
		} catch (EntityNotFoundException e) {
				throw new DBException(DBException.NOT_FOUND_ERROR,e);
		}
		return 1;
	}

//begin delete

	/*********************************************************
	* Deletes an entity from  a table/kind Book from Datastore
	* @param bean data bound JavaBean with data to delete
	* @return number of rows changed
	*************************************************************/
	public int delete(Book bean) throws DBException{
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Key key = KeyFactory.createKey("Book", bean.getBookId() );
		try {
			datastore.delete(key);
		} catch (Exception e) {
				throw new DBException(DBException.NOT_FOUND_ERROR,e);
		}
		return 1;
	}

//begin find All 

	/***************************************************
	*List all data with data populated from table/kind Book
	*@return list of data bound JavaBeans with data
	******************************************************/
	public List<Book> findAll() throws DBException{
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		List<Book> list =  new LinkedList<Book>();
		Query q = new Query("Book");
		PreparedQuery pq = datastore.prepare(q);
		for(Entity entity:pq.asIterable() ) {
			list.add(mapRow(entity) );
		}
		return list;
	} //findAll

//GAE ResultSetHandler 
	/*****************************************************
	*Map entity to JTO DataBean
	*@param entity GAE entity aka table
	*@return  bean data bean that maps to entity
	******************************************************/
	@Override
	public Book mapRow(Entity entity) {
		Book bean = new Book();
		Map<String, Object> map = entity.getProperties();
		Long keyId=entity.getKey().getId();
		bean.setBookId(keyId);
		bean.setTitle( (String) map.get("title") );
		bean.setIsbn( (String) map.get("isbn") );
		bean.setPublisherId( (Long) map.get("publisherId") );
		bean.setAuthorId( (Long) map.get("authorId") );
		bean.setCreateDate( (java.util.Date) map.get("createDate") );
		return bean;
	}
	/*************************************************************
	*map entity to JTO DataBean
	*@param entity GAE entity aka table
	*@param bean data bound bean with data
	**************************************************************/
	@Override
	public void mapEntity(Entity entity,FormBeanAware jtoBean) {
		Book bean = (Book) jtoBean;
		//key bookId no need to update value
		entity.setProperty("title",bean.getTitle() );
		entity.setProperty("isbn",bean.getIsbn() );
		entity.setProperty("publisherId",bean.getPublisherId() );
		entity.setProperty("authorId",bean.getAuthorId() );
		if( bean.getCreateDate()!=null) {
				entity.setProperty("createDate", new java.util.Date( bean.getCreateDate().getTime() )  );
		}
	}

}
