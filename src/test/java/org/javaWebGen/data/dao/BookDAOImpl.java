/*
Copyright (c) 2012-2017 Kevin Scott All rights  reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of 
 this software and associated documentation files (the "Software"), to deal in 
 the Software without restriction, including without limitation the rights to 
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
 so.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 SOFTWARE.
 */ 
package org.javaWebGen.data.dao;

import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.math.BigDecimal;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.ScalarHandler;
import org.javaWebGen.data.bean.*;
import org.javaWebGen.util.SQLHelper;
import org.javaWebGen.exception.DBException;
import org.javaWebGen.data.SpringJdbcDao;
/******************************************************************************
* WARNING this class is generated by GenerateSpringDAO v1_06 based on Database schema     
* This class should not be modified, but may be extended.
  This class will be regenerated if the database schema is changed. 
* @author Kevin Scott                                                        
*******************************************************************************/
public abstract class BookDAOImpl extends SpringJdbcDao { 
//begin private Vars

//find by Primary Key

	/******************************************************
	*Get a DataBean with table data in it
	*@return DataBean with data
	*********************************************************/
	public Book findByPrimaryKey(Long bookId) throws DBException,SQLException{
		String sql=Book.getSelectSQL()+"  WHERE book_id=?";;
		List<Book> list =this.getJdbcTemplate().query(sql,new EntityMapper() );
		if (list!=null && list.size()>0){
			 return list.get(0);
		}else{
			//throw error so a NullPointer does not get used in the model layer
			 throw new DBException(DBException.WRONG_NUMBER_OF_ROWS,"no rows returned on find by primary key");
		}
	} //find by primary key

//begin insert (create)

	/**
	* Inserts new DataBean into data store 
	* @param entity DataAware Javabean to store in DB 
	* @return primary key=0
	*/
	public Long insert(Book entity) throws DBException,SQLException{
			Object[] parms= new Object[5];
		 // leave key field alone entity.getBookId() );
		parms[0]=entity.getTitle() ;
		parms[1]=entity.getIsbn() ;
		parms[2]=entity.getPublisherId() ;
		parms[3]=entity.getAuthorId() ;
		parms[4]=entity.getCreateDate() ;
		String sql="INSERT INTO Book(title ,isbn ,publisher_id ,author_id ,create_date ) VALUES(?,?,?,?,?)";

		QueryRunner run = new QueryRunner(this.getDataSource() );
		SQLHelper.dump(sql,parms);
		Long id =run.insert(sql,new ScalarHandler<BigDecimal>(), parms).longValue();
		return id;
	}

//begin update(store)

	/**
	* Updates the database with a bound DataBean 
	* @param entity Databean to update DB with
	* @return number row changed
	*/
	public int update(Book entity) throws DBException,SQLException{
			Object[] parms= new Object[6];
		 // leave key field alone entity.getBookId() );
		parms[0]=entity.getTitle() ;
		parms[1]=entity.getIsbn() ;
		parms[2]=entity.getPublisherId() ;
		parms[3]=entity.getAuthorId() ;
		parms[4]=entity.getCreateDate() ;
		parms[5]=entity.getBookId() ;
		String sql="UPDATE Book SET title=? ,isbn=? ,publisher_id=? ,author_id=? ,create_date=?  WHERE book_id=?";
		QueryRunner run = new QueryRunner(this.getDataSource() );
		SQLHelper.dump(sql,parms);
		int rows=run.update(sql,parms);
		return rows; //rows updated
	}

//begin delete

	/**
	* Remove bound databean from the data store 
	* @param entity DataAware javabean with data to delete
	* @return number row changed
	*/
	public int delete(Book entity) throws DBException,SQLException{
		Object[] parms=new Object[1];
		parms[0]=entity.getBookId();
		String sql="DELETE FROM book  WHERE book_id=?";;
		QueryRunner run = new QueryRunner(this.getDataSource() );
		SQLHelper.dump(sql,parms);
		int rows=run.update(sql,parms);
		return rows; 
	} // by primary key

//begin find All 

	/******************************************************
	* Get a javabean with table data in it
	@return List DataBean with data
	*********************************************************/
	public List<Book> findAll() throws DBException,SQLException{
		String sql=Book.getSelectSQL();
		return this.getJdbcTemplate().query(sql,new EntityMapper() );
	} //findAll

/*spring datamapper*/
static final class EntityMapper implements RowMapper<Book>{ 
    public Book mapRow(ResultSet rs, int rowNum) throws SQLException { 
        Book entity = new Book(); 
        Object[] data = new Object[6];
        data[0]=rs.getObject(1); 
        data[1]=rs.getObject(2); 
        data[2]=rs.getObject(3); 
        data[3]=rs.getObject(4); 
        data[4]=rs.getObject(5); 
        data[5]=rs.getObject(6); 
        entity.setData(data); 
        return entity; 
    } 
} 

}
