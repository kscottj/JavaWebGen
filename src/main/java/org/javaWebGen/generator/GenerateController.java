/*
Copyright (c) 2003 Kevin Scott

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.
*/
package org.javaWebGen.generator;

import java.sql.Types;
import java.util.*;
import java.io.*;

import org.apache.commons.text.StringSubstitutor;
import org.javaWebGen.config.WebConst;
import org.javaWebGen.exception.UtilException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Generated Web Controller Objects from the database config
 * creates a WebController and a implementation class. The
 * implementation class will be overwritten if it exist.
 * @author Kevin Scott
 * @version $Revision: 1.3 $
 *
 */
public class GenerateController extends CodeGenerator {
    private static final Logger log=LoggerFactory.getLogger(GenerateController.class);
    public static final String VERSION="GenerateController v4_07";
     
	private String className=null;
	private String subClassName=null;
	
     private String classTemplate=
         "/*\n"+
         "Copyright (c) 2012-2014 Kevin Scott All rights  reserved.\n"+
         " Permission is hereby granted, free of charge, to any person obtaining a copy of \n"+
         " this software and associated documentation files (the \"Software\"), to deal in \n"+
         " the Software without restriction, including without limitation the rights to \n"+
         " use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n"+
          "of the Software, and to permit persons to whom the Software is furnished to do \n"+
         " so.\n"+
         "\n"+
         " THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"+
         " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"+
         " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"+
         " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"+
         " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"+
         " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"+
         " SOFTWARE.\n "+
         "*/ \n"+
         "/* data Acees Object talks to DB */"+ 
         "\n"+
         "package org.javaWebGen.admin;\n"+
         "import java.util.*;\n"+
         "import javax.annotation.Generated;\n"+
         "import org.javaWebGen.WebController;\n"+
         "import org.javaWebGen.data.bean.*;\n"+
         "import org.javaWebGen.util.HtmlUtil;\n"+
         "import org.javaWebGen.util.StringUtil;\n"+
         "import org.javaWebGen.exception.*;\n"+
         "import org.javaWebGen.model.*;\n"+
         "import org.slf4j.Logger;\n"+
         "import org.slf4j.LoggerFactory;\n"+
         "import javax.servlet.http.HttpServletRequest;\n"+

         "/******************************************************************************\n"+
         "* WARNING this class is generated by "+VERSION+" based on Database schema     \n"+
         "* This class should not be modified!  It can be regenerated by the code generator." +
         "* when the database schema is modifued\n" +
         "* If you need to change the this code you should override what you do not need.\n"+
         "*******************************************************************************/\n"+
         "@SuppressWarnings(\"unused\") //StringUtil might be needed depending for some data fields\n"+
         "@Generated(value = { \"org.javaWebGen.generator.GenerateController\" })\n"+
         "public abstract class ${javaWebGen.className} extends WebController{ \n"+
         "private static final Logger log=LoggerFactory.getLogger(${javaWebGen.className}.class);"+
         "//begin private Vars\n"+
         "${javaWebGen.vars}\n"+
         "//find by Primary Key\n"	 +
         "${javaWebGen.finder}\n"+
         "//begin insert (create)\n"+
         "${javaWebGen.insert}\n"+
         "//begin update(store)\n"+
         "${javaWebGen.update}\n"+
         "//begin delete(store)\n"+
         "${javaWebGen.delete}\n"+
         "//begin listAll)\n"+
         "//${javaWebGen.list}\n"+
			"//begin getDataBean\n"+
			"${javaWebGen.getDataBean}\n" +
			"${javaWebGen.model}\n" +
			" //end getModel\n" +
	        "}//end impl class\n";        
			
         private String subClassTemplate=
         "/*\n"+
         " THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"+
         "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"+
         " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"+
         " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"+
         " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"+
         " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"+
         " SOFTWARE.\n "+
         " */\n"+
         "/* */\n"+
         "package org.javaWebGen.admin;\n\n"+
         "import java.util.*;\n"+
         "import javax.annotation.Generated;\n"+
         "import org.javaWebGen.ServerAction;\n"+
         "import org.javaWebGen.data.bean.*;\n"+
         "import org.javaWebGen.webform.*;\n"+
         "import org.javaWebGen.config.*;\n"+
         "import org.javaWebGen.exception.*;\n"+
         "import javax.servlet.ServletException;\n"+
         "import org.slf4j.Logger;\n"+
         "import org.slf4j.LoggerFactory;" +
         "import javax.servlet.http.HttpServletRequest;\n"+
		 "import javax.servlet.http.HttpServletResponse;\n"+
		 
         "/******************************************************************************\n"+
         "* This class is generated by "+VERSION+" based on Database schema     \n"+
         "* This class <b>should</b> be modified.   This class will <b>NOT</b> get\n"+
         "* regenerated and is just generated as a place holder.\n"+
         "* @author Kevin Scott                                                        \n"+
         "* @version $Revision: 1.00 $                                               \n"+
         "*******************************************************************************/\n"+
         "@Generated(value = { \"org.javaWebGen.generator.GenerateController\" })\n"+
         "public class ${javaWebGen.subClassName} extends ${javaWebGen.className} { \n"+
         "@SuppressWarnings(\"unused\")\n "+
         "\tprivate final Logger log=LoggerFactory.getLogger(${javaWebGen.className}.class);"+
		 "//begin exec" +
		 "${javaWebGen.exec}"+
		 "//end exec\n"+
		 "${javaWebGen.json}\n"+
		 "//end doJSON\n"+
		 "${javaWebGen.soap}\n"+
		 "//end doSOAP\n"+
		 "}//\n";



    public static final String BEAN_PACKAGE="org.javaWebGen.data.bean.";
    
    /**
    *
    */
    public void init(){
    	classTemplate=getTemplate(classTemplate );
    	subClassTemplate=getTemplate(subClassTemplate );
     }

    /************************************
    *gen vars
    *************************************/
    private String makeVars(String[] cols, int[] types){
        //String beanName=DataMapper.formatClassName(tableName);
        String modelName=DataMapper.formatClassName(getTableName() )+"Model";
        String text=
            "\t\n/** model for this object **/;\n"+
//            "\tprivate "+beanName+" dataBean;\n"+
        	"\tprivate "+modelName+" model= null;\n";

        return text;
    }  
    /************************************
    *gen find by primary key
    *************************************/
    private String makeFindByPrimaryKey(String[] keys, int[] types){
        String beanName=DataMapper.formatClassName(getTableName());
        ArrayList <String> primaryKeys=getPrimaryKeys();
        int[] primaryKeyTypes=getPrimaryKeyTypes();
        
        if(primaryKeyTypes.length!=1){
        	return "//only on primary keys supported can not generated getById method\n";
        }
        
        if(primaryKeys.size()==1){
        	String javaType=DataMapper.getJavaTypeFromSQLType(primaryKeyTypes[0]);
	        String text=
	        "\n\t/***************************************************\n"+
	        "\t*Get a DataBean with table data in it.\n"+
	        "\t* for one row in the database\n"+
	        "\t*@return DataBean with data from the Model\n"+
	        "\t******************************************************/\n"+
	        "\tprotected "+beanName+" getById("+javaType+" id) throws WebAppException{\n";
	        
	        text+=TS+TS+beanName+" bean =getModel().getById(id);\n";
	        //for(int i=1;i<primaryKeys.size();i++){
	        //	text+=","+DataMapper.formatVarName(primaryKeys.get(i).toString() );
	        //}   
	        
	        text +=TS+TS+"return bean;\n"+
	        TS+"} //find by primary key\n";
	        

	        return text;
        }
        return "";
    }
    
    /************************************
    *gen create(INSERT)
    *************************************/
    private String makeInsert(String[] cols, int[] types){
        String beanName=BEAN_PACKAGE+DataMapper.formatClassName(getTableName() );
        String text=
        "\n\t/***************************************************\n"+
        "\t*Inserts new data based on the\n"+
        "\t*values in a DataBean. \n"+
        "\t*\n"+
        "\t*@param bean data Bound JavaBean\n"+
        "\t*@see org.javaWebGen.data.DataBean\n"+
        "\t******************************************************/\n"+
        "\tprotected void create("+beanName+" bean) throws WebAppException{\n";
        int[] primaryKeyTypes=getPrimaryKeyTypes();
        if(primaryKeyTypes.length>1) {
        	 text+="\t\t//getModel().create(bean); \n";
        	 text+="\t\t//overide with custom code to handle multiple primary keys; \n";
        }else {
        	 text+="\t\tgetModel().create(bean);\n";
        }
        		
       
        text+="\t} //end create\n";
        return text;
    }
    
    /************************************
    *gen update(store)
    *************************************/
    private String makeUpdate(String[] cols, int[] types){
        String beanName=DataMapper.formatClassName(getTableName() );
        String text=
        "\n\t/***************************************************\n"+
        "\t*Updates the database with values " +
        "\t*in a DataBean \n"+
        "\t*@param bean data Bound  JavaBean\n"+
        "\t*@see org.javaWebGen.data.DataBean\n"+
        "\t******************************************************/\n"+
        "\tprotected void update("+beanName+" bean) throws WebAppException{\n";
		int[] primaryKeyTypes=getPrimaryKeyTypes();
        if(primaryKeyTypes.length>1) {
        	 text+="\t\t//getModel().save (bean); \n";
        	 text+="\t\t//overide with custom code to handle multiple primary keys \n";
        }else {
        	 text+="\t\tgetModel().save(bean);\n";
        }
        text+="\t} //end create\n";
        return text;
    }
    
  
    
    /************************************
     *gen Exec methods that respond to commands
     *************************************/
     private String makeExec(String[] cols, int[] types){
    	 
         String beanName=DataMapper.formatClassName(getTableName() );
         ArrayList <String> primaryKeys=getPrimaryKeys();
         String text=makeListMethod(cols,types);
         if( primaryKeys.size()>0){
         	text+=
	         "\t\t\t//database table has primary KEY in it\n" +
	         getDetailText(beanName)+
	         getUpdateCmd(beanName)+
	         getDeleteCmd(beanName)+
	         getCreateCmd(beanName);		     
         }       
         return text;
     }
     /**
      * Not working yet.  generates the source code for a WebSevice response formatted in JSON
      * The implementing class will need to provide security
      * 
      * @param cols
      * @param types
      * @return method source code
      */
     private String makeJSONWebService(String[] cols, int[] types){
    	 log.trace(">>> enter makeJSONWebService");
        // String beanName=DataMapper.formatClassName(getTableName() );
         ArrayList <String> primaryKeys=getPrimaryKeys();
         if(primaryKeys.size()<=0)
        	 return "//primaryKeys.size()="+primaryKeys.size()+"\n";  //can not do this without a primary key
         String text=
             "\n/***************************************************\n"+
             "* Generated JSON web service results  \n"+
    		 "* If table had a primary key supplied in database table\n" +
    		 "* GENERATE list, and findById commands\n"+
    		 "*\n"+
             "*@return result JSON text\n"+
             "*@Exception ServletException throw a http500 error to user\n"+
             "******************************************************/\n"+
             "\tpublic String doJSON(HttpServletRequest req) throws ServletException{return \"\";}\n";
  /*
         "\t\ttry{\n"+  
    		 "\t\t\tif(getCmd(req)==null) {\n"+ 
    		 "\t\t\t\t throw new WebAppException(WebAppException.VALIDATE_ERROR,\"No command passed on URL\");\n"+
             "\t\t\t}else if(WebController.getCmd(req).equals(WebConst.LIST_CMD) ){\n" +
             "\t\t\t\t\t"+beanName+"[] list =getModel().list();\n" +
         	"\t\t\t\t\tStringBuffer buffer = new StringBuffer(\"[\");\n" +
         	"\t\t\t\t\tint size=list.length;\n"+
         	"\t\t\t\t\t  for (int i=0;i<size;i++){;\n"+
         	"\t\t\t\t\t    "+beanName+" bean = ("+beanName+") list[i];\n"+
         	"\t\t\t\t\t	   buffer.append(bean.toJSON()+\",\");\n"+
         	"\t\t\t\t\t  }\n"+
         	"\t\t\t\t\tJSONArray jarray=new JSONArray(buffer.toString()+\"]\" );\n"+
         	"\t\t\t\t\treturn jarray.toString();\n"+  
             "\t\t\t}\n"+
	         "\t\t\telse if(WebController.getCmd(req).equals(WebConst.DETAIL_CMD) ){\n" +
	         getWebServiceDetailText(beanName)+
         	
         	"\t\t\t\t\t return dataBean.toJSON();\n"+
         	"\t\t\t}\n"+
         	"\t\t\tthrow new WebAppException(WebAppException.VALIDATE_ERROR,\"No VALID command passed on URL\");\n"+
             "\t\t}catch(Exception e){\n" +
             "\t\t\tlog.error (\"JSON error\",e);\n" +
             "\t\t\tthrow new ServletException(\"JSON error\",e);\n"+
             "\t\t} \n" +
             "\t} \n" ;*/    		 
         log.trace("<<< leave makeJSONWebService");
         return text;
     }
     /**
      * Not working yet.  generates the source code for a WebSevice response formatted in JSON
      * The implementing class will need to provide security
      * 
      * @param cols
      * @param types
      * @return method source code
      */
     private String makeSOAPWebService(String[] cols, int[] types){
    	 log.trace(">>> enter makeSOAPWebService");
        // String beanName=DataMapper.formatClassName(getTableName() );
         ArrayList <String> primaryKeys=getPrimaryKeys();
         if(primaryKeys.size()<=0)
        	 return "//primaryKeys.size()="+primaryKeys.size()+"\n";  //can not do this without a primary key
         String text=
             "\n/***************************************************\n"+
             "* This method is experimental!\n"+
             "* Generated SOAP web service results  \n"+
    		 "* If table had a primary key supplied in database table\n" +
    		 "* GENERATE list, and findById commands\n"+
    		 "*\n"+
             "*@return result SOAP text\n"+
             "*@Exception ServletException throw a http500 error to user\n"+
             "******************************************************/\n"+
             "\tpublic String doSOAP(HttpServletRequest req) throws ServletException{return \"\";}\n";
    	/*
    		 "\t\t\tif(getCmd(req)==null) {\n"+ 
    		 "\t\t\t\t throw new WebAppException(WebAppException.VALIDATE_ERROR,\"No command passed on URL\");\n"+
             "\t\t\t}else if(WebController.getCmd(req).equals(WebConst.LIST_CMD) ){\n" +
             "\t\t\t\t\t"+beanName+"[] list =getModel().list();\n" +
         	"\t\t\t\t\tStringBuffer buffer = new StringBuffer();\n" +
         	"\t\t\t\t\tint size=list.length;\n"+
         	"\t\t\t\t\t  for (int i=0;i<size;i++){;\n"+
         	"\t\t\t\t\t    "+beanName+" bean = ("+beanName+") list[i];\n"+
         	"\t\t\t\t\t	   buffer.append(bean.toXML()+\"\");\n"+
         	"\t\t\t\t\t  }\n"+
         	"\t\t\t\t\treturn WebController.SOAP_HEADER+buffer.toString()+SOAP_FOOTER;\n"+  
             "\t\t\t}\n"+
	         "\t\t\telse if(WebController.getCmd(req).equals(WebConst.DETAIL_CMD) ){\n" +
	         getWebServiceDetailText(beanName)+
         	"\t\t\t\t\treturn WebController.SOAP_HEADER+dataBean.toXML()+SOAP_FOOTER;\n"+
             "\t} \n" ; 
              */  		 
         log.trace("<<< leave makeSOAPWebService");
         return text;
     }  
     /**
      * get Detail section for a web service method
      * @param beanName
      * @return
      * 
      */
     /*private String getWebServiceDetailText(String beanName){
         
         ArrayList <String> primaryKeys=getPrimaryKeys();
    	 String text=
    
 	         "\t\t\t\t\t"+beanName+" dataBean= getModel().getByIdParm(req.getParameter(\""+
 	         DataMapper.formatVarName(primaryKeys.get(0).toString() )+"\"";
 	         for (int i=1;i<primaryKeys.size();i++){
 	        	 text+=
 		         "),req.getParameter(\""+DataMapper.formatVarName(primaryKeys.get(i).toString() )+"\"";
 	         }
 	         text+=
 	         ") );\n";
          	
    	 return text;
     }*/
     private String makeListMethod(String[] cols, int[] types){
         String beanName=DataMapper.formatClassName(getTableName() );
        // ArrayList <String> primaryKeys=getPrimaryKeys();
         String text=
         "\n\t/*****************************************************************\n"+
 		 "\t* retrieves all data from a table and displays it using a JSP \n"+
 		 "\t*\n"+
         "\t*@return page(controller) or URI to jump to\n"+
         "\t*********************************************************************/\n"+
         "\tpublic ServerAction list(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n"+ 
         "\t\t\tList<"+beanName+"> list =getModel().list();\n" +
         "\t\t\t\t\treq.setAttribute(WebConst.DATA_BEAN_LIST,list);\n"+
         "\treturn ServerAction.viewAction(\"/admin/"+beanName+"List.jsp\");\n"+
         "\t}\n" ;       
         return text;
     } 
     /**
      * get Detail section of exec method
      * @param beanName
      * @return
      * 
      */
     private String getDetailText(String beanName){
         
         ArrayList <String> primaryKeys=getPrimaryKeys();
    	 String text=
  		     "\t/******************************************************************************\n"+
		     "*\t retrieves all data from a datastore forwards to a view page to display it \n"+
		     "*\t\n"+
		     "*\t@return page(controller) or URI to jump to\n"+
		     "*\t******************************************************************************/\n"+
		     "\tpublic ServerAction detail(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n";
    	 
	     	 int[] ptypes=getPrimaryKeyTypes();
 	         if(ptypes.length==1) {
 	        	 text+="\t\t\t"+beanName+" dataBean= getModel().getByIdParm(req.getParameter(\""+DataMapper.formatVarName(primaryKeys.get(0).toString() )+"\") );\n";
 	        	text+="\t\t\t"+beanName+"Form  form= new "+beanName+"Form(req);\n";
 	        	text+="\t\t\tform.setData(dataBean,req);\n";

 	         }else {
 	        	 text+="\t\t\t//"+beanName+" dataBean= getModel().getByIdParm(req.getParameter("+DataMapper.formatVarName(primaryKeys.get(0).toString() )+"\") );\n";
 	        	 text+="\t\t\t//overide with custom code to handle multiple primary keys \n";
 	        	 text+="\t\t\t"+beanName+"Form  form= new "+beanName+"Form(req);\n";
 	        	 text+="\t\t\tform.setData(req);\n";		 
 	         } 	  
 	        text+="\t\t\treq.setAttribute(WebConst.FORM,form ) ; \n" 	 
 	         +"\t\t\treturn ServerAction.viewAction(\"/admin/"+beanName+"Detail.jsp\");\n"
 	         +"\t\t}\n";
    	 return text;
     }
     /**
      * get update section of exec method
      * @param beanName
      * @return
      */
     private String getUpdateCmd(String beanName){
    	 //ArrayList <String> primaryKeys=getPrimaryKeys();
    	 String text=
    		 "\t/*******************************************************************************\n"+
    		 "\t* Generated method  \n"+
    		 "\t* retrieves all data from a datastore forwards to a view page to display it \n"+
    		 "\t********************************************************************************\n"+
    		 "\t*@return page(controller) or URI to jump to\n"+
    		 "\t*/\n"+
    		 "\tpublic ServerAction update(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n"+	 
    		 
    		 "\t\t\t"+beanName+"Form form= new "+beanName+"Form(req);\n"+
    		 "\t\t"+beanName+" databean=getDataBean(req);\n"+
    		 "\t\tform.setData(databean,req);\n"+
    		 "\t\treq.setAttribute(WebConst.FORM, form);\n"+
    		 "\t\tif(form.isValid() ){\n";
 	     	 int[] ptypes=getPrimaryKeyTypes();
 	         if(ptypes.length==1) {
 	        	 text+="\t\t\tgetModel().save( ("+beanName+")form.getData() );\n";

 	         }else {
 	        	text+="\t\t\t//getModel().save( ("+beanName+")form.getData() );\n";
 	        	text+="\t\t\t//overide with custom code to handle multiple primary keys \n";        	
 	         } 
 	         text+="\t\t\treturn ServerAction.updateAction(\"/admin/"+beanName+"/"+WebConst.LIST_CMD+"\");\n"+
	         "\t\t}else{\n"+
	         "\t\t\treturn ServerAction.viewAction(\"/admin/"+beanName+"Detail.jsp\");\n"+
	         "\t\t}\n"+
	         "\t}\n";
    	 return text;
     }
     /**
      * get delete section for exec method
      * @param beanName
      * @return
      */
     private String getDeleteCmd(String beanName){
    	 //ArrayList <String> primaryKeys=getPrimaryKeys();
    	 String text=
        	"\t/**********************************************************************************\n"+
           	"\t* Retrieves all data from a datastore forwards to a view page to display it \n"+
        	"\t*\n"+
        	"\t*@return page(controller) or URI to jump to\n"+
        	"\t************************************************************************************/\n"+
			"\tpublic ServerAction delete(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n"+
	         "\t\t"+beanName+" databean =getDataBean(req);\n" ;
	     	int[] ptypes=getPrimaryKeyTypes();
	        if(ptypes.length==1) {
	        	 text+="\t\tgetModel().remove(databean);\n";

	        }else {
	        	text+="\t\t//getModel().remove(databean);\n";
	        	text+="\t\t//overide with custom code to handle multiple primary keys \n";        	
	        }
	       
	        text+="\t\treturn ServerAction.updateAction(\"/admin/"+beanName+"/"+WebConst.LIST_CMD+"\");\n"+
	         "\t}\n";
	         return text;
     }
     
     /**
      * get delete section for exec method
      * @param beanName
      * @return
      */
     private String getCreateCmd(String beanName){
    	 String text=
    	     "\t/***************************************************************************************************\n"+
    	     "\t* Creates a new record \n"+
    	     "\t*\n"+
    	     "\t*@return page(controller) or URI to jump to\n"+
    	     "\t****************************************************************************************************/\n"+
    	     "\tpublic ServerAction create(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n"+
    	     "\t\t"+beanName+"Form form = new "+beanName+"Form(req);\n"+
    	     //"\t\t"+beanName+" databean = getDataBean(req);\n"+
    	     "\t\tform.setData(new "+beanName+"(), req);\n"+
    	     "\t\tif( form.isValid() ){;\n";
 	     	int[] ptypes=getPrimaryKeyTypes();
 	        if(ptypes.length==1) {
 	        	text+="\t\t\tgetModel().create( ("+beanName+") form.getData() );\n" ;

 	        }else {
 	        	text+="\t\t\t//getModel().create( ("+beanName+") form.getData() );\n" ;
 	        	text+="\t\t//overide with custom code to handle multiple primary keys \n";        	
 	        }
	         
 	       text+="\t\t\treturn ServerAction.updateAction(\"/admin/"+beanName+"/"+WebConst.LIST_CMD+"\");\n"+
	         "\t\t}else{\n" +
	         "\t\t\treq.setAttribute(WebConst.FORM,form);\n"+
	         "\t\t\treturn ServerAction.viewAction(\"/admin/"+beanName+"Create.jsp\");\n"+
	         "\t\t}\n"+
	         "\t}//end create\n";
    	 text+=
		     "\t/**********************************************************************************************\n"+
		     "\t* Generated method  \n"+
		     "\t* displays the CreateForm \n"+
		     "\t*\n"+
		     "\t*@return page(controller) or URI to jump to\n"+
		     "\t***********************************************************************************************/\n"+
		     "\tpublic ServerAction add(HttpServletRequest req, HttpServletResponse res) throws WebAppException{\n"+
    	     "\t\t"+beanName+"Form form = new "+beanName+"Form(req);\n"+
    	     "\t\tform.setData(req);\n"+
		     "\t\tform.setAction(\"/admin/"+beanName+"/create\");\n"+
		    "\t\treq.setAttribute(WebConst.FORM, form);\n"+
		    "\treturn ServerAction.viewAction(\"/admin/"+beanName+"Create.jsp\");\n"+
		    "\t}\n";
		    
    	 
         return text;
     }

    /************************************
     *gen delete
     *************************************/
     private String makeDelete(String[] cols, int[] types){
        String beanName=DataMapper.formatClassName(getTableName() );
        String text=
        "\n\t/***************************************************\n"+
        "\t*Updates the database with a Databean \n"+
        "\t*@param bean data bound JavaBean\n"+
        "\t*@see org.javaWebGen.data.DataBean\n"+
        "\t*\n"+
        "\t******************************************************/\n"+
        "\tprotected void delete("+beanName+" bean) throws WebAppException{\n";
        
	    int[] ptypes=getPrimaryKeyTypes();
        if(ptypes.length==1) {
        	 text+="\t\tgetModel().remove(bean);\n";

        }else {
        	text+="\t\t//getModel().remove(databean);\n";
        	text+="\t\t//overide with custom code to handle multiple primary keys \n";        	
        }
        text+="\t} //end delete\n";
        return text;
     }
     
    /**************************************************
    *build class based on template
    ********************************************************/
    protected String buldClass() throws Exception{
    	String[] colNames=this.getColNames();
    	int[] colTypes=getColTypes();
    
        String vars = makeVars(colNames,colTypes);
        String finder = makeFindByPrimaryKey(colNames,colTypes);
        String insert = makeInsert(colNames,colTypes);
        String update = makeUpdate(colNames,colTypes);
        String delete = makeDelete(colNames,colTypes);
        String list = makeList(colNames,colTypes);
        //String modelName=DataMapper.formatClassName(tableName)+"Model";
        String dataBean=makeDataBean(colNames,colTypes);
        String model=makeController(colNames,colTypes);
       // String[] p = new String[10];
        HashMap<String,String> valueMap=new HashMap<String,String>();
        valueMap.put("javaWebGen.className", className);
        valueMap.put("javaWebGen.vars", vars);
        valueMap.put("javaWebGen.finder", finder);
        valueMap.put("javaWebGen.insert", insert);
        valueMap.put("javaWebGen.update", update);
        valueMap.put("javaWebGen.delete", delete);
        valueMap.put("javaWebGen.list", list);
        valueMap.put("javaWebGen.getDataBean", dataBean);
        valueMap.put("javaWebGen.model", model);

        StringSubstitutor sub = new StringSubstitutor(valueMap);
        String classText=sub.replace(classTemplate);
        return classText;
    }
    /**
	 * @param colNames2
	 * @param colTypes2
	 * @return
	 */
	private String makeList(String[] colNames2, int[] colTypes2) {
        String beanName=DataMapper.formatClassName(getTableName() );
        String text=
        "\n\t/***************************************************\n"+
        "\t*List all rows in table \n"+
        "\t*@return list of databeans\n"+
        "\t******************************************************/\n"+
        "\tprotected List <"+beanName+"> list() throws WebAppException{\n"+
		"\t\treturn getModel().list();\n"+
		"\t} //end list\n";
        return text;
	}

	/**
	 * @param colNames2
	 * @param colTypes2
	 * @return
	 */
	private String makeDataBean(String[] colNames, int[] colTypes) {
		String beanName=DataMapper.formatClassName(getTableName() );
		String text=
		"\t/**************************************************************************************\n"+
		"\t*fills in a databean based on data in a request\n"+
		"\t***************************************************************************************/\n"+
		"\tprotected static "+beanName+" getDataBean(HttpServletRequest req) throws WebAppException{\n"+
		
		"\t\t\t"+beanName+" dataBean=new "+beanName+"();\n"+
		"\t\ttry{\n";
		for(int i = 0;i< colNames.length;i++){
			text+= "\t\t\tdataBean.set"+DataMapper.formatMethodName(colNames[i]);
			switch(colTypes[i]){
			case Types.DATE:
				text+="(StringUtil.convertToDate(req.getParameter(\"" +DataMapper.formatVarName(colNames[i])+"\") ) );\n";
				break;
			case Types.TIMESTAMP:
			case Types.TIME:
				text+="(StringUtil.convertToTime(req.getParameter(\"" +DataMapper.formatVarName(colNames[i])+"\") ) );\n";
				break;		
			default:
				text+="(HtmlUtil.stripTags(req.getParameter(\"" +DataMapper.formatVarName(colNames[i])+"\") ) );\n";
			}

			
		}
		text+=  "\t\t}catch(Exception e){\n" +
				"\t\t\tthrow new WebAppException(WebAppException.APP_ERROR,e);\n" +
				"}";
		text+="\t\treturn dataBean;\n\t}//end getDataBean\n\n";
		return text;
	}

	/**
	 * @param colNames2
	 * @param colTypes2
	 * @return
	 */
	private String makeController(String[] colNames, int[] colTypes2) {
		String beanName=DataMapper.formatClassName(getTableName() );
		String text=
		"\t/************************************\n"+
		"\t*Get the correct model class\n"+
		"\t*@return model class\n"+
		"\t************************************/\n"+
		"\tprotected synchronized "+beanName+"Model getModel() throws WebAppException{\n"+
		
		"\t\tif (model==null){\n"+
		//"\t\t\tsynchronized(model){\n" +
		"\t\t\tif(model==null){\n" +
		"\t\t\t\tmodel = new " +beanName+"Model();\n"+
		"\t\t\t}\n" +
		//"\t\t}\n"+
		"\t\t}\n"+
		"\t\treturn model;\n\t}//end getModel\n\n";
		return text;
	}

	
	/**************************************************
    *build class based on template
    ********************************************************/
    protected String buldSubClass() throws Exception{
    
       /* String[] p = new String[7];
        p[0]= subClassName;
        p[1]= className;
        p[2]=makeExec(getColNames(),getColTypes() );
        p[3]=subClassName;
        p[4]=this.makeJSONWebService(getColNames(), getColTypes());
        p[5]=this.makeSOAPWebService(getColNames(), getColTypes());
        p[6]=subClassName;*/

        
        //String classText = StringUtil.replace(subClassTemplate,p);
        HashMap<String,String>valueMap = new HashMap<String,String>();
     	valueMap.put("javaWebGen.subClassName", subClassName );
     	valueMap.put("javaWebGen.className", className );
     	valueMap.put("javaWebGen.exec", makeExec(getColNames(),getColTypes() ) );
     	valueMap.put("javaWebGen.json", this.makeJSONWebService(getColNames(), getColTypes()) );
     	valueMap.put("javaWebGen.soap", this.makeSOAPWebService(getColNames(), getColTypes()) );
  	
     	StringSubstitutor sub = new StringSubstitutor(valueMap);
        return sub.replace(subClassTemplate);
    }  
    /**
    *
    */
    protected void execute() throws UtilException{
    	try{
    		className=DataMapper.formatClassName(getTableName() )+"ActionImpl";
    		subClassName=DataMapper.formatClassName(getTableName() )+"Action" ;
    		writeJavaClass(buldClass() );
	        writeSubClass(buldSubClass() );
    	}catch(Exception e){
    		throw new UtilException(UtilException.CODE_GENERATOR_EXEC,e);
    	}
        
    }
    /**
     * process stuff after main execute loop has finished 
     * processing tables
     */
    @Override
    protected void postExecute() throws UtilException {
    	 
    	
    }
    
    /**
    *Write out generated class
    */
    private void writeJavaClass(String text) throws IOException{
        String name = className;
        String fileName=getFilePath()+File.separator+name+".java";
        if(getPrimaryKeys().size() >0){
            
            FileWriter file = new FileWriter(fileName);
            PrintWriter out = new PrintWriter(file);
            out.print(text);
            out.flush();
            out.close();
            log.info("---wrote out file="+fileName+"---");
        }
    }

    /**
    *Write out generated class
    */
    private void writeSubClass(String text) throws IOException{
        String name = subClassName;
        String fileName=getFilePath()+File.separator+name+".java";
        if(getPrimaryKeys().size() >0){
            File file = new File(fileName);
            if(!file.exists() ){
                //String fileName=filePath+File.separator+name+".java";
                FileWriter fw = new FileWriter(file);
                PrintWriter out = new PrintWriter(fw);
                out.print(text);
                out.flush();
                out.close();
                log.debug("---wrote out file="+fileName+"---");
            }
        }
    }
    
 	/**
     * main
     */
     public static void main(String[] args) {
         try{ 	
         	GenerateController app = new GenerateController();
         	app.setCmdParms(args);
         	app.init();
            app.processXmlFile(app.getFileName());
        	}catch(Exception e){
        		log.error("main",e);
        		System.exit(911);
        	}
     }
 /**
  * 
  */
 	public void useage() {
         System.out.println("Generate Action classes(Controllers) based on schema");
         System.out.println("<schema> torque XML with tables definitions");
         System.out.println("<path> destination file path");
         System.out.println("-template optional filename of template to use for code generator");
         System.out.println("USAGE GenerateController <schema xml> <path> [-template fileName]");
         System.exit(1);
 	}


}