/*
 Copyright (c) 2003-2006 Kevin Scott

 Permission is hereby granted, free of charge, to any person obtaining a copy of 
 this software and associated documentation files (the "Software"), to deal in 
 the Software without restriction, including without limitation the rights to 
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do 
 so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all 
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 SOFTWARE.
 */

package org.javaWebGen.generator;

import java.sql.*;
import java.util.HashMap;
import java.io.*;

import org.apache.commons.text.StrSubstitutor;
import org.javaWebGen.exception.UtilException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * Experimental class that will Someday generate Lookup data object That will
 * load read only database data into memory.  Should be considered experimental
 * IE untested
 * 
 * @author Kevin Scott
 * @version $Revision: 1.2 $
 * 
 */
public class GenerateLookup extends CodeGenerator {

	public static String VERSION = "GenerateLookup v1_01";
	 private final static Logger log= LoggerFactory.getLogger(OldGenerateSpringView.class);
	private String classTemplate = 
		"/*\n"
		+ "Copyright (c) 2006 Kevin Scott\n"
		+ "Permission is hereby granted, free of charge, to any person obtaining a copy of \n"
		+ " this software and associated documentation files (the \"Software\"), to deal in \n"
		+ " the Software without restriction, including without limitation the rights to \n"
		+ " use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n"
		+ "of the Software, and to permit persons to whom the Software is furnished to do \n"
		+ " so, subject to the following conditions:\n"
		+ "\n"
		+ " The above copyright notice and this permission notice shall be included in all \n"
		+ " copies or substantial portions of the Software.\n"
		+ "\n"
		+ " THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"
		+ "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"
		+ " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"
		+ " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"
		+ " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"
		+ " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"
		+ " SOFTWARE.\n "
		+ "*/ \n"
		+ "package org.javaWebGen.data.dao.lookup;\n\n"
		+ "import java.sql.*;\n"
		+ "import java.math.*;\n"
		+ "import org.javaWebGen.util.Util;\n"
		+ "import org.javaWebGen.exception.DBException;\n"
		+ "import org.javaWebGen.data.DbResult;"
		+ "import org.javaWebGen.data.bean.*;\n"
		+ "import org.javaWebGen.data.DAO;\n"
		+ "import org.javaWebGen.data.DataManager;\n"
		+ "/*****************************************************************************\n"
		+ "* WARNING this class is generated by"+VERSION+" based on Database schema  \n"
		+ "* loads a database table into memory.  Tables should be read only data that\n"
		+ "* will not be modified often.\n"
		+ "* This class should not be modified,it will get regenerated\n                   \n"
		+ "* @author Kevin Scott                                                     \n"
		+ "* @version $Revision: 1.00 $                                           \n"
		+ "****************************************************************************/\n"
		+ "public class ${javaWebGen.className}Lookup extends DAO { \n"
		+ "\tprivate  static ${javaWebGen.className}[] objectList = null;\n"
		+ "//constructor\n" + "${javaWebGen.constructor}\n" + "//INIT\n" + "\t${javaWebGen.init}\n"
		+ "\t//findByMethods\n" + "\t${javaWebGen.findByMethods}\n" + "\t// list method\n"
		+ "\t${javaWebGen.listAll}\n\n"
		+ "}";

	public static final String COUNTRY_CODE = "contry_code";

	/**
	 * 
	 */
	public void init() throws UtilException{
	//	super.init();
		classTemplate=getTemplate(classTemplate);
	}

	/**
	 * 
	 */
	public String makeConstructor() throws Exception {
		String text = "\n/**************************************************************************\n"
				+ "* WARNING this method is generated based on Database schema\n"
				+ "* This method load all rows of a lookup table into memory(cached)\n"
				+ "*****************************************************************************/\n"
				+ "public "
				+ DataMapper.formatClassName( getTableName())
				+ "Lookup(DataManager manager) {\n"
				+ "	super(manager);\n"
				+ "    init();\n"
				+ "}\n"
				+ "\n/**************************************************************************\n"
				+ "* WARNING this method is generated based on Database schema\n"
				+ "* This method load all rows of a lookup table into read only memory(cached)\n"
				+ "*****************************************************************************/\n"
				+ "public "
				+ DataMapper.formatClassName(getTableName())
				+ "Lookup() {\n" + "\tsuper();\n" + "\tinit();\n" + "}\n";

		return text;
	}

	/**
	 * 
	 */
	protected String makeInit(String[] cols) throws Exception {
		String text = "\n/**************************************************************************\n"
				+ "* WARNING this method is generated based on Database schema\n"
				+ "* This method load all rows of a lookup table into read only memory(cached)\n"
				+ "*****************************************************************************/\n"
				+ "public void init() {\n"
				+ "\ttry{\n"
				+ "\t\tload();\n"
				+ "\t}catch(DBException e){\n"
				+ "\t\tUtil.error(e);\n"
				+ "\t}\n"
				+ "}\n\n"
				+ "\n/**************************************************************************\n"
				+ "* WARNING this method is generated based on Database schema\n"
				+ "* This method load all rows of a lookup table into read only memory(cached)\n"
				+ "*****************************************************************************/\n"
				+ "private void load() throws DBException{\n"
				+ "\ttry{\n"
				+ "\t\tString sql = "
				+ DataMapper.formatClassName(getTableName())
				+ ".getSelectSQL();\n"
				+ "\t\tDbResult result = runQuery(sql);\n"
				+ "\t\tobjectList = "
				+ DataMapper.formatClassName(getTableName())
				+ ".load(result);\n"
				+ "\t}catch(SQLException e){\n"
				+ "\t\tthrow new DBException(DBException.BAD_QUERY,e);\n"
				+ "\t}\n"
				+ "}\n"
				+ "\n/**************************************************************************\n"
				+ "* WARNING this method is generated based on Database schema\n"
				+ "* This method load all rows of a lookup table into read only memory(cached)\n"
				+ "*****************************************************************************/\n"
				+ "public void refresh(){\n"
				+ "\ttry{\n"
				+ "\t\tload();\n"
				+ "\t}catch(DBException e){\n"
				+ "\t\tUtil.error(e);\n"
				+ "\t}\n" + "}\n";
		return text;

	}

	/**
	 * 
	 */
	protected String makeFindByMethod(String[] cols, int[] types)
			throws Exception {
		String text = "";
		boolean countryused = false;
		int colIndex = 0;

		for (int i = 0; i < cols.length; i++) {
			if (cols[i].equalsIgnoreCase(COUNTRY_CODE)) {
				countryused = true;
				colIndex = i;
				i = cols.length;
			}
		}
		if (!countryused) {
			for (int i = 0; i < cols.length; i++) {
				log.debug("methodName="
								+ DataMapper.formatMethodName(cols[i]));
				text += "\n/*************************************************************************\n"
						+ "* WARNING this method is generated based on Database schema\n"
						+ "* This method returns the first object that has a field that is equal to the parm\n"
						+ "****************************************************************************/\n"
						+ "public "
						+ DataMapper.formatClassName(getTableName())
						+ " findBy"
						+ DataMapper.formatMethodName(cols[i])
						+ "("
						+ getDataType(types[i])
						+ " parm) throws DBException{\n"
						+ "\tfor(int i=0;i< objectList.length; i++){\n"
						+ "\t"
						+ getDataType(types[i])
						+ " holder= "
						+ convertDataType(types[i])
						+ "objectList[i].get"
						+ DataMapper.formatMethodName(cols[i])
						+ "() );\n"
						+ "\t\tif(holder.equals(parm)) {\n"
						+ "\t\t\t return objectList[i];\n"
						+ "\t\t}\n"
						+ "\t}\n"
						+ "\t\treturn null;  //did not find anything;\n"
						+ "}\n";
			}
		} else {

			for (int i = 0; i < cols.length; i++) {
				if (cols[i].equalsIgnoreCase(COUNTRY_CODE)) {
					log.debug("methodName="+ DataMapper.formatMethodName(cols[i]));
					text += "\n/*************************************************************************\n"
							+ "* WARNING this method is generated based on Database schema\n"
							+ "* This method returns the first object that has a field that is equal to the parm\n"
							+ "* and countryCode\n"
							+ "****************************************************************************/\n"
							+ "public "
							+ DataMapper.formatClassName(getTableName())
							+ " findBy"
							+ DataMapper.formatMethodName(cols[i])
							+ "("
							+ getDataType(types[i])
							+ " parm, int contryCode) throws DBException{\n"
							+ "\tfor(int i=0;i< objectList.length; i++){\n"
							+ "\t"
							+ getDataType(types[i])
							+ " holder= "
							+ convertDataType(types[i])
							+ "objectList[i].get"
							+ DataMapper.formatMethodName(cols[i])
							+ "() );\n"
							+ "\t\tif(holder.equals(parm) && objectList["
							+ colIndex
							+ "].intValue() ==contryCode ) {\n"
							+ "\t\t\t return objectList[i];\n"
							+ "\t\t}\n"
							+ "\t}\n"
							+ "\t\treturn null;  //did not find anything;\n"
							+ "}\n";
				}
			}

		}

		return text;
	}

	/***************************************************************************
	 * 
	 * 
	 **************************************************************************/
	protected String makeListAll(String tableName) {
		String text = "\n/**************************************************\n"
				+ "*WARNING this method is generated based on Database schema\n"
				+ "*method returns all entries in lookup table\n"
				+ "***************************************************/ \n"
				+ "public " + DataMapper.formatClassName(tableName)
				+ "[] listAll() throws DBException{\n"
				+ "\treturn objectList;\n" + "}\n\n";
		return text;
	}

	/***************************************************************************
	 * find the parameter type based on DB
	 * 
	 **************************************************************************/
	private String getDataType(int type) {
		String text = null;
		switch (type) {
		case Types.CHAR:
		case Types.VARCHAR:
		case Types.LONGVARCHAR:
			text = "String";
			break;
		case Types.BIT:
			text = "Boolean";
			break;
		case Types.TINYINT:
		case Types.SMALLINT:
		case Types.INTEGER:
			text = "Integer";
			break;
		case Types.BIGINT:
			text = "Long";
			break;

		case Types.FLOAT:
		case Types.DOUBLE:
			text = "Double";
			break;

		case Types.NUMERIC:
		case Types.DECIMAL:
			text = "BigDecimal";
			break;
		case Types.DATE:
			text = "java.util.Date";
			break;
		case Types.TIMESTAMP:
			text = "java.util.Date";
			break;
		}
		return text;
	}

	/***************************************************************************
	 * find the parameter type based on DB
	 * 
	 **************************************************************************/
	private String convertDataType(int type) {

		String text = "";
		switch (type) {
		case Types.CHAR:
		case Types.VARCHAR:
		case Types.LONGVARCHAR:
			text = "(String) (";
			break;
		case Types.BIT:
			text = "new Boolean(";
			break;
		case Types.TINYINT:
		case Types.SMALLINT:
		case Types.INTEGER:
			text = " new Integer(";
			break;
		case Types.BIGINT:
			text = "new (Long";
			break;

		case Types.FLOAT:
		case Types.DOUBLE:
			text = "new(Double";
			break;

		case Types.DECIMAL:
			text = "(BigDecimal)(";
			break;
		case Types.DATE:
			text = "(java.util.Date)(";
			break;
		case Types.TIMESTAMP:
			text = "(java.util.Date)(";
			break;
		}
		return text;
	}


	/***************************************************************************
	 * 
	 **************************************************************************/
	protected String buldClass() throws Exception {

		// String setData=makeSetData(_colNames,_colTypes);
		String tableName=getTableName();
		String colNames[]=this.getColNames();
		/*String[] p = new String[10];
		
		p[0] = "{";
		p[1] = DataMapper.formatClassName(tableName);
		p[2] = DataMapper.formatClassName(tableName);
		p[3] = DataMapper.formatClassName(tableName);
		p[4] = makeConstructor();
		p[5] = makeInit(colNames);
		p[6] = makeFindByMethod(colNames, this.getColTypes() );
		p[7] = makeListAll(tableName);
		p[8] = "}";*/

		// debug(classTemplate);
		//TODO retest after update!
		HashMap<String,String> valueMap = new HashMap<String,String>();
		valueMap.put("javaWebGen.className", DataMapper.formatClassName(tableName) );
		valueMap.put("javaWebGen.constructor",  makeConstructor() );
		valueMap.put("javaWebGen.init", makeInit(colNames) );
		valueMap.put("javaWebGen.findBy", makeFindByMethod(colNames, this.getColTypes() ) );
		valueMap.put("javaWebGen.listAll", makeListAll(tableName) );
		StrSubstitutor sub = new StrSubstitutor(valueMap);
		
		//String classText =getClassText(classTemplate, p);

		return sub.replace(classTemplate);
	}

	/**
	 * 
	 */
	protected void execute() throws UtilException {
        try {
			writeJavaClass(buldClass());
		} catch (Exception e) {
			throw new UtilException(UtilException.CODE_GENERATOR_EXEC,e);
		}
		
	}
    /**
     * process stuff after main execute loop has finished 
     * processing tables
     */
    @Override
    protected void postExecute() throws UtilException {
    	 
    	
    }
	/**
	 * 
	 */
	private void writeJavaClass(String text) throws IOException {
		String fileName = this.getFilePath() + File.separator
				+ DataMapper.formatClassName(getTableName()) + "Lookup.java";
		
		FileWriter file = new FileWriter(fileName);
		PrintWriter out = new PrintWriter(file);
		out.print(text);
		out.flush();
		out.close();
		log.info("----wrote file="+fileName+"-----");
	}

	/**
	 * 
	 */
	public static void main(String[] args) {
       try{ 	
        		GenerateLookup app = new GenerateLookup();
            	app.setCmdParms(args);
            	app.init();
                app.processFile(app.getFileName());
           	}catch(Exception e){
           		log.error("Main",e);
           	}
	}
	
	public void useage(){
	    System.out.println("To Process all tables in a text file");
	    System.out.println("USAGE GenerateLookup  < Schema XML> <path> [-template] [fileName");
	    System.exit(1);
	}
}