/*
 * =================================================================== *
 * Copyright (c) 2017 Kevin Scott All rights  reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 * if any, must include the following acknowledgment:
 * "This product includes software developed by "Kevin Scott"
 * Alternately, this acknowledgment may appear in the software itself,
 * if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The name "Kevin Scott must not be used to endorse or promote products
 * derived from this software without prior written permission. For
 * written permission, please contact kevscott_tx@yahoo.com
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL KEVIN SCOTT BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.javaWebGen.generator;


import java.sql.Types;
import java.util.*;

 

import java.io.*;

import org.javaWebGen.exception.UtilException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.text.StrSubstitutor;

/**
 * create Models 
 * Generated Web Model Objects from the database config
 * creates a Model class and a implementing class
 * This class Will be overwriten!
 * @author Kevin scott
 * @version $Revision: 1.2 $
 *
 */
public class GenerateWebForm extends GenerateModel {
    
    public static final String VERSION="GenerateWebForm v1_05";
	private String className=null;
	private final static Logger log= LoggerFactory.getLogger(GenerateWebForm.class);
    
    private String classTemplate=
        "/*\n"+
        " Copyright (c) 2014 Kevin Scott All rights  reserved.\n"+
        " Permission is hereby granted, free of charge, to any person obtaining a copy of \n"+
        " this software and associated documentation files (the \"Software\"), to deal in \n"+
        " the Software without restriction, including without limitation the rights to \n"+
        " use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n"+
        " of the Software, and to permit persons to whom the Software is furnished to do \n"+
        " so.\n"+
        "\n"+
        " THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"+
        " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"+
        " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"+
        " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"+
        " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"+
        " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"+
        " SOFTWARE.\n */"+
        " package org.javaWebGen.webform;\n "+
        " \n "+
        "  \n "+
         "import org.javaWebGen.form.*;\n "
        +"import javax.servlet.http.HttpServletRequest;\n\n"
        + "/******************************************************************************\n"
		+ "* This class is generated by "
		+ VERSION
		+ " based on Database schema     \n"
		+ "* This class <b>should</b> be modified.   This class will <b>NOT</b> get\n"
		+ "* regenerated and is just generated as a place holder.\n"
		+ "* @author Kevin Scott                                                        \n"
		+ "* @version $Revision: 1.00 $                                               \n"
		+ "*******************************************************************************/\n"+
        "public class ${javaWebGen.className} extends CsrfForm{\n "+
		"private static final long serialVersionUID = 453453453788212L;\n"+
        " 	/*form fields*/\n "+
        "  ${javaWebGen.formField} \n"+
        "  /**constructor that builds form*/\n"+
        " ${javaWebGen.constructor}"+
    	" \n "+
        "\t/** get form name */\n"+
    	"\tpublic String getWebFormName(){\n "+
    	"\t\treturn \"${javaWebGen.webForm}\";\n "+
    	"\t}\n "
    	+ "//getters\n"
    	+ "${javaWebGen.getters}"+
    	"}\n ";
      
 
    
    /**
    *
    */
    public void init(){
    	classTemplate=getTemplate(classTemplate);
    	//subClassTemplate=getTemplate(subClassTemplate);     
    }

    /************************************
    *gen class vars
    *************************************/
    private String makeVars(String[] colNames, int[] colTypes){
    	 ArrayList <String> primaryKeys=getPrimaryKeys();
    	String text = "";
		for (int i = 0; i < colNames.length; i++) {
			boolean isKey=false;

			String fieldName=DataMapper.formatVarName(colNames[i]);
			for(String primaryKey:primaryKeys){
				primaryKey=DataMapper.formatVarName(primaryKey);
				if ( primaryKey.equals(fieldName) ){
					isKey=true;
				}
			}
			switch (colTypes[i]) {
			
			case Types.DATE:
				text += "\tprivate HtmlDateField "+fieldName+"= new HtmlDateField(\""+fieldName+"\" ";
			break;
			case Types.TIMESTAMP:
				text += "\tprivate HtmlDateTimeField  "+fieldName+"= new HtmlDateTimeField(\""+fieldName+"\" ";
			break;
			case Types.TIME:
				text += "\tprivate HtmlTimeField  "+fieldName+"= new HtmlTimeField(\""+fieldName+"\" ";
			break;
			case Types.BIGINT:
			case Types.INTEGER:
			case Types.NUMERIC:
				text += "\tprivate HtmlNumberField  "+fieldName+"= new HtmlNumberField(\""+fieldName+"\" ";
			break;
			case Types.DECIMAL:
			case Types.FLOAT:
			case Types.DOUBLE:	
				text += "\tprivate HtmlDecimalField "+fieldName+"= new HtmlDecimalField(\""+fieldName+"\" ";
			break;					
			default:
				text += "\tprivate HtmlTextField  "+fieldName+"= new HtmlTextField(\""+fieldName+"\" ";
			}
			if (isKey){
				text+=",false);\n";   //primary keys are not editable anyway
			}else{
				text+=",false);\n";
			}
			
		} //end for loop
        return text;
    }  
    
    /***************************************************************************
	 * build class based on template
	 **************************************************************************/
    protected String buldClass() throws Exception{
    	String[] colNames=getColNames();
    	int[] colTypes=getColTypes();	
        String vars = makeVars(colNames,colTypes);
        String constructor=makeConstructor(colNames,colTypes );
        String formClassName=className+"Form";
     
        HashMap<String,String> valueMap= new HashMap<String,String>();
        valueMap.put("javaWebGen.className", formClassName);
        valueMap.put("javaWebGen.formField", vars);
        valueMap.put("javaWebGen.constructor", constructor);
        valueMap.put("javaWebGen.webForm", formClassName);
        valueMap.put("javaWebGen.getters", this.makeGetters(colNames, colTypes));
        
        
        StrSubstitutor sub = new StrSubstitutor(valueMap);
        String classText = sub.replace(classTemplate);

        return classText;
    }
    /**
     * generates constructor and add field to form
     * @param colNames
     * @param colTypes
     * @return
     */
    private String makeConstructor(String[] colNames, int[] colTypes  ) {
    	
    	String text=
    	   "\tpublic "+className+"Form(HttpServletRequest req){\n"
    	   +"\t\tsuper(req);\n";
    	   
    			
    	for(String colName:colNames){
    		String fieldName=DataMapper.formatVarName(colName);
    		text+="\t\tthis.addField("+fieldName+");\n";
    	}
    	text+="\t}\n";
     
			
      	return text;
	}
    /**
     * generates constructor and add field to form
     * @param colNames
     * @param colTypes
     * @return
     */
    private String makeGetters(String[] colNames, int[] colTypes) {
    	
   	 ArrayList <String> primaryKeys=getPrimaryKeys();
   	String text = "";
		for (int i = 0; i < colNames.length; i++) {
			//boolean isKey=false;

			String fieldName=DataMapper.formatVarName(colNames[i]);
			String className=DataMapper.formatClassName(colNames[i]);
			for(String primaryKey:primaryKeys){
				primaryKey=DataMapper.formatVarName(primaryKey);
				if ( primaryKey.equals(fieldName) ){
					//isKey=true;
				}
			}
			switch (colTypes[i]) {
			
			case Types.DATE:
				text += "\tpublic HtmlDateField get"+className+"(){\n\t return "+fieldName+";\n\t}\n";
			break;
			case Types.TIMESTAMP:
				text += "\tpublic HtmlDateField get"+className+"(){\n\t\t return "+fieldName+";\n\t}\n";
			break;
			case Types.BIGINT:
			case Types.INTEGER:
			case Types.NUMERIC:
				text += "\tpublic HtmlNumberField get"+className+"(){\n\t\t return "+fieldName+";\n\t}\n";
			break;
			case Types.DECIMAL:
			case Types.FLOAT:
			case Types.DOUBLE:	

				text += "\tpublic HtmlDecimalField get"+className+"(){\n\t\t return "+fieldName+";\n\t}\n";
			break;					
			default:
				text += "\tpublic HtmlTextField get"+className+"(){\n\t\t return "+fieldName+";\n\t}\n";
			}
			
		} //end for loop
       return text;
	}
	/**
     * write model factory class that will be used by spring context
     * @throws IOException
     */
    protected void writeFactory() throws IOException{

    }

	/**************************************************
    *build class based on template
    ********************************************************/
    protected String buldSubClass() throws Exception{
    
        /*String[] p = new String[3];
        p[0]= subClassName;
        p[1]= className;
        p[2]= subClassName;

        String classText = StringUtil.replace(subClassTemplate,p);
         */
        return "";
    }
    
    /**
    *
    */
    @Override
    protected void execute() throws UtilException{
    	try{
    		className=DataMapper.formatClassName(getTableName() );
    		 
    		
    	

    		//subClassName=DataMapper.formatClassName(getTableName() )+"Model";
	        writeJavaClass(buldClass() );
	        //writeSubClass(buldSubClass() );
    	}catch(Exception e){
    		throw new UtilException(UtilException.CODE_GENERATOR_EXEC,e);
    	}
    }
    
    /**
    *Called after looping though all tables-columns
    *Good place to generate files that are not needed for every table
    *IE PMF etc...
    */
    @Override
    protected void postExecute() throws UtilException{

    }
    
    /**
    *Write out generated class
    */
    private void writeJavaClass(String text) throws IOException{
        String name = className;
        ArrayList <String> primaryKeys=getPrimaryKeys();
        String fileName=getFilePath()+File.separator+name+"Form.java";
        
      
        if(primaryKeys.size() >0){       
        	File file=new File(fileName);        
            FileWriter fw = new FileWriter(file);
            PrintWriter out = new PrintWriter(fw);
            out.print(text);
            out.flush();
            out.close();
            log.info("---write file="+fileName+"---");
        }
    }

    /**
    *Write out generated class
    */
    /*private void writeSubClass(String text) throws IOException{
        String name = subClassName;
        ArrayList <String> primaryKeys=getPrimaryKeys();
        String fileName=getFilePath()+File.separator+name+".java";
        if(primaryKeys.size() >0){
            File file = new File(fileName);
            if(!file.exists() ){
                FileWriter fw = new FileWriter(file);
                PrintWriter out = new PrintWriter(fw);
                out.print(text);
                out.flush();
                out.close();
                Util.info("---write file="+fileName+"---");
            }
        }
    } */  
  
     
   
 
	/**
     * main
     */
     public static void main(String[] args) {
         try{ 	
         	GenerateWebForm app = new GenerateWebForm();
         	app.setCmdParms(args);
         	app.init();
             app.processXmlFile(app.getFileName());
        	}catch(Exception e){
        		log.error("Error in main",e);
        		System.exit(911);
        	}
     }
 /**
  * 
  */
 	public void useage() {
         System.out.println("To Process all tables in a text file");
         System.out.println("USAGE GenerateModel -f <filename> <path>");
         System.exit(1);
 	}

}

