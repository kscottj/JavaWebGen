/*
Copyright (c) 2003 Kevin Scott

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.
*/

package org.javaWebGen.generator;


import java.io.*;
import java.util.HashMap;

import org.apache.commons.text.StrSubstitutor;
import org.javaWebGen.exception.UtilException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated database aware JavaBean objects based on database config
 * @author Kevin scott
 * @version $Revision: 1.2 $
 *
 */
public class GenerateJDBCDataBean extends CodeGenerator {
	@SuppressWarnings("unused")
	private boolean useJDO=true;


   
	public static final String VERSION="GenerateDataBean v1_04";
		private final static Logger log= LoggerFactory.getLogger(GenerateJDBCDataBean.class);
     	private String classTemplate=
         "/*\n"+
        "Copyright (c) 2012-2013 Kevin Scott\n"+
        "Permission is hereby granted, free of charge, to any person obtaining a copy of \n"+
        "this software and associated documentation files (the \"Software\"), to deal in \n"+
        "the Software without restriction, including without limitation the rights to \n"+
        "use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n"+
        "of the Software, and to permit persons to whom the Software is furnished to do \n"+
        "so, subject to the following conditions:\n"+
        "\n"+
        "The above copyright notice and this permission notice shall be included in all \n"+
        "copies or substantial portions of the Software.\n"+
        "\n"+
        " THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n"+
        " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n"+
        " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n"+
        " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n"+
        " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n"+
        " OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n"+
        " SOFTWARE.\n "+
        "*/ \n"+
     "package org.javaWebGen.data.bean;\n\n"+
     "import java.text.*;\n"+
     "import java.math.*;\n"+
     "import java.io.*;\n"+
     "import java.util.ArrayList;\n"+
     "import org.javaWebGen.data.DbResult;\n"+
     "import org.javaWebGen.data.DataBean;\n"+
     "import org.javaWebGen.util.StringUtil;\n"+
     "import org.json.*;\n"+
      "/******************************************************************************\n"+
      "* WARNING this class is generated by "+VERSION+" based on Database schema\n"+
      "* This class should not be modified, but may be extended.\n" +
      "* It will be regenerated when the database schema changes.\n"+ 
      "*******************************************************************************/\n"+	
      "@SuppressWarnings({ \"unused\", \"serial\" })\n"+
      "public class ${javaWebGen.className} implements DataBean, Serializable{ \n"+
      "//begin private Vars\n"+
      "private static int[] types=null;\n"+
      "${javaWebGen.vars}\n"+
      "//begin getters and setters\n"+
      "${javaWebGen.getsSets}\n"+
      "//begin toXML()\n"+
      "${javaWebGen.xml}\n"+
      "//begin getData\n"+
      "${javaWebGen.getData}\n"+
      "//begin setData\n"+
      "${javaWebGen.setData}\n"+
      "//begin get Insert\n"+
      "${javaWebGen.insert}\n"+
      "//begin get update\n"+
      "${javaWebGen.update}\n"+
      "//begin get select\n"	 +
      "${javaWebGen.select}\n"+
      "//begin get makeLoad\n" +
      "${javaWebGen.load}\n"+
     "//begin make Type \n"	 +         
     "${javaWebGen.types}\n"+
     "//make JSON text \n"	 +         
     "${javaWebGen.json}\n"+
     
     "}//end Generated class\n";




    /**
    *
    */
    public void init(){

    	classTemplate=getTemplate(classTemplate);
    }

    /************************
    * list of list of column types
    ****************************/
    protected String makeTypes(String[] cols, int[] types){
        String text =
        "\t/**********************************************\n"+
        "\t*get an array of column types that match DB table\n"+
        "\t*@return array of Types\n"+
        "\t************************************************/\n"+
        "\tpublic int[] getDataTypes(){\n"+
        "\t\tif(types == null){\n"+
        "\t\t types = new int["+types.length+"];\n";
            for(int i=0;i<types.length;i++){
                    text+="\t\t\t types["+i+"]="+types[i]+";\n";
            }
            text+="\t\t} //end if\n";
    
            text+="\treturn types;\n";
            text+="\t}\n\n";
            return text;
    }

    /**
    * gen xml for databean
    */
    protected String makeXML(String tableName, String[] cols, int[] types) throws Exception{

        String text=
        "\n\t/************************************\n"+
        "\t*Warning Generated method builds an XML String based on object data\n"+
        "\t*@return xml \n"+
        "\t****************************************/\n"+
        "\n\tpublic String toXML(){\n"+
        "\t\tString xml=\"<"+tableName+" ";
        for( int i=0;i<cols.length;i++){
        	text+=
        		DataMapper.formatVarName(cols[i])+"='"+"\"+get"+
        		DataMapper.formatMethodName(cols[i])+"()+\"' ";
//        		DataMapper.formatVarName(cols[i])+">\"+\n";
        }
        //text+="\t\t\t\t\"</"+tableName+">\\n\";\n"+
        text+="/>\\n\";\n";
        text+="\t\treturn xml;\n\t}//end toXML()";
        return text;
    }


    /**
    *gen insert sql
    */
    public String makeInsertSQL(String[] cols){
        String sql=
        "\n\t/********************************************\n"+
        "\t*Warning Generated method gets insert statement without a where clause \n"+
        "\t*@return insert statement without where clause  \n"+       
        "\t************************************************\n"+
        "\t*/ \n"+
        "\tpublic static String getInsertSQL(){\n"+
        "\t\tString sql = \"";
        if(DataMapper.useUpCaseTableName){
        	sql+=DataMapper.mapInsertSQL(cols,getTableName().toUpperCase() )+"\";\n";
        }else{
        	sql+=DataMapper.mapInsertSQL(cols,getTableName() )+"\";\n";
        }
        sql+="\t\treturn sql;\n";
        sql+="\t}\n";
        return sql;
    }

    /**
    *gen update sql
    */
    public String makeUpdateSQL(String[] cols){
        String sql=
        "\n\t/********************************************\n"+
        "\t*Warning Generated method gets Update Statement without a where clause\n"+
        "\t*@return update sql without where clause\n"+
        "\t**************************************/ \n"+
        "\tpublic static String getUpdateSQL(){\n"+
        "\t\tString sql =\"";
        if(DataMapper.useUpCaseTableName){
        	sql+=DataMapper.mapUpdateSQL(cols,getTableName().toUpperCase() )+"\";\n";
        }else{
        	sql+=DataMapper.mapUpdateSQL(cols,getTableName() )+"\";\n";
        }
        sql+="\t\treturn sql;\n";
        sql+="\t}\n";
        return sql;
    }
    /**
    * gen select sql
    */
    public String makeSelectSQL(String[] cols){
        String sql=
        "\n\t/************************************\n"+
        "\t*Warning Generated method gets a select statement without a where clause\n"+
        "\t*@return select sql without a where clause\n"+
        "\t****************************************/ \n"+
        "\tpublic static String getSelectSQL(){\n"+
        "\t\tString sql = \"";
        sql+=DataMapper.mapSelectSQL(cols,getTableName() );
        if(DataMapper.useUpCaseTableName){
        	sql+=" from "+getTableName().toUpperCase() +" \";\n";
        	
        }else{
        	sql+=" from "+getTableName() +" \";\n";
        	
        }
        sql+="\t\treturn sql;\n";
        sql+="\t}\n";
        return sql;
    }

    /********************************************
    * gen load method
    *********************************************/
    public String makeLoad(String[] cols){
    	String beanName = DataMapper.formatClassName(getTableName() );
    	
        String text=
        "\n\t/**********************************************\n"+
        "\t*Warning Generated method loads DbResult into object\n"+
        "\t*@param result\n"+
        "\t*@see org.javaWebGen.data.DbResult\n"+
        "\t************************************************/ \n"+
        "\tpublic static ArrayList<"+beanName+"> load(DbResult result) throws  IllegalArgumentException{\n"+
        "\t\tArrayList <"+beanName+">list= new ArrayList<"+beanName+">(result.size() );\n"+
        "\t\tfor (int i=0; i< result.size(); i++){\n"+
        "\t\t\t"+beanName+" o= new "+beanName+"();\n"+
        "\t\t\to.setData( result.get(i) );\n"+
        "\t\t\tlist.set(i,o);\n"+
        "\t\t }\n"+
        "\t\t return list;\n"+
        "\t}\n";
        return text;
    }


 


    /************************************************8**
    *build class based on template
    ********************************************************/
    protected String buldClass() throws Exception{
		System.out.println("start buildClass");
    	String[] colNames=getColNames();
    	int[] colTypes=getColTypes();
    	
        if( colNames!=null &&  colTypes !=null){
            String xml = makeXML(DataMapper.formatClassName(getTableName() ), colNames, colTypes);
            String getsSets = DataMapper.makeGettersSetters( colNames, colTypes);
            getsSets+=DataMapper.makeOverloadSetters( colNames, colTypes);
            //Object[] keys= this.getPrimaryKeys().toArray();
            //int[] types=this.getPrimaryKeyTypes();

            String vars = DataMapper.makeJDBCPrivateVars( colNames,colTypes);
            /*String[] p = new String[12];
            p[0]= DataMapper.formatClassName(getTableName() );
            p[1]=vars;
            p[2]=getsSets;
            p[3]=xml;
            p[4]=makeGetData(colNames,colTypes);
            p[5]=makeSetData(colNames,colTypes);
            p[6]=makeInsertSQL(colNames);
            p[7]=makeUpdateSQL(colNames);
            p[8]=makeSelectSQL(colNames);
            p[9]=makeLoad(colNames);
            p[10]=makeTypes(colNames,colTypes);
            p[11]=makeJSON(colNames,colTypes);*/
            
            HashMap<String,String> valueMap = new HashMap<String,String>();
            valueMap.put("javaWebGen.className",DataMapper.formatClassName(getTableName() ));
            valueMap.put("javaWebGen.vars",vars);
            valueMap.put("javaWebGen.getsSets",getsSets);
            valueMap.put("javaWebGen.xml",xml);
            valueMap.put("javaWebGen.getData",makeGetData(colNames,colTypes) );
            valueMap.put("javaWebGen.setData",makeSetData(colNames,colTypes) );
            valueMap.put("javaWebGen.insert",makeInsertSQL(colNames) );
            valueMap.put("javaWebGen.update",makeUpdateSQL(colNames) );
            valueMap.put("javaWebGen.select",makeSelectSQL(colNames) );
            valueMap.put("javaWebGen.load",makeLoad(colNames) );
            valueMap.put("javaWebGen.types",makeTypes(colNames,colTypes) );
            valueMap.put("javaWebGen.json",makeJSON(colNames,colTypes) );
            
            StrSubstitutor sub = new StrSubstitutor(valueMap);
            
           // String classText = getClassText(classTemplate,p);
            return sub.replace(classTemplate);
        }else{
            return "";
        }
        
    }

    protected String makeSetData(String[] colNames, int[] colTypes) {
		String text=
	        "\n\t/*********************************************\n"+
	         "\t*Warning Generated method fills object with data\n"+
	         "\t*@param data matching the data from a table\n"+
	         "\t*@see org.javaWebGen.data.DAO\n"+
	         "\t*@see org.javaWebGen.data.DbResult\n"+
	         "\t*************************************************/\n"+
	         "\tpublic void setData(Object[] data) throws IllegalArgumentException{\n"+
	         "\t\tif( data.length != "+colNames.length+"){\n"+
	         "\t\t\tthrow new IllegalArgumentException(\"query return wrong number of rows \"+data.length);\n"+
	         "\t\t} //end if\n\n"+       
             DataMapper.makeSetDataMethod(colNames,colTypes)+
            
             "\t}//end setData\n";

			
		return text;
	}

	protected String makeGetData(String[] colNames, int[] colTypes) {
        String text=
            "\n\t/****************************************************\n"+
            "\t*Warning Generated method gets all data in data bean  \n"+
            "\t*@return data from object as array of objects \n"+
            "\t*******************************************************/\n"+
            "\tpublic Object[] getData()"+
            "{\n"+
            "\t\tObject[] data = new Object["+colNames.length+"];\n"+
            DataMapper.mapGetDataMethod(colNames,colTypes)+
            "\t\treturn data;\n"+
            "\t} //end getData\n";
		return text;
	}
	   /**
	    * gen JSON for databean
	    */
	    protected String makeJSON( String[] cols, int[] types) throws Exception{
	    	String beanName = DataMapper.formatClassName(getTableName() );
	        String text=
	        "\n\t/************************************\n"+
	        "\t*Warning Generated method builds an JSON String based on object data\n"+
	        "\t*@return JSON text string\n"+
	        "\t****************************************/\n"+
	        "\n\tpublic String toJSON() {\n"+
	        "\n\t\tJSONObject jo = new JSONObject();\n"+
	        "\t\ttry{\n";

	        for( int i=0;i<cols.length;i++){
		        text+="\t\t\tjo.append(\""+DataMapper.formatVarName(cols[i])+"\",get"+DataMapper.formatMethodName(cols[i])+"() );\n"; 
	        }
	        text+=
    		"\t\t\treturn jo.toString();\n "+
           "\t\t}catch(JSONException je){\n"+
     	   "\t\t\treturn \" "+beanName+"{exception:'\"+je.getMessage()+\"}'\";\n "+
    	   "\t\t}\n"+
    	   "\t} //end to Json\n";
	      
	       
	        return text;
	    }
	
	/**
    * exec write Java class
    * 
    */
    @Override
    protected void execute() throws UtilException{
        try {
			writeJavaClass(buldClass() );
		} catch (Exception e) {
			throw new UtilException(UtilException.CODE_GENERATOR_EXEC,e);
		}
    }
    /**
     * process stuff after main execute loop has finished 
     * processing tables
     */
    @Override
    protected void postExecute() throws UtilException {
    	 
    	
    }
    /**
    *Write out generated class
    */
   
    protected void writeJavaClass(String text) throws IOException{
        String name = DataMapper.formatClassName(getTableName() );
        String fileName=getFilePath()+File.separator+name+".java";
        FileWriter file = new FileWriter(fileName);
        PrintWriter out = new PrintWriter(file);
        out.print(text);
        out.flush();
        out.close();
        log.info("---wrote file="+fileName+"---");
    }

	/**
     * main
     */
     public static void main(String[] args) throws Exception {
        
         	GenerateJDBCDataBean app = new GenerateJDBCDataBean();
         	app.setCmdParms(args);
         	app.init();
            app.processXmlFile(app.getFileName());
        	
     }
     
 
 /**
  * 
  */
     @Override
 	public void useage() {
         System.out.println("To Process all tables in a text file");
         System.out.println("USAGE GenerateJDBCDataBean  <schema XML> <path>");
         System.exit(1);
 	}

}